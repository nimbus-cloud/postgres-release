#!/bin/bash -eu

source /var/vcap/jobs/postgres/bin/pgconfig.sh

function pgexec() {
  local database
  database="${1}"

  local command
  command="${2}"

  "${PACKAGE_DIR}/bin/psql" \
    -U "vcap" \
    -p "${PORT}" \
    -d "${database}" \
    -c "${command}"
}

function create_roles() {
  echo "Creating roles..."
  "${PACKAGE_DIR}/bin/psql" \
    -U "vcap" \
    -p "${PORT}" \
    -d "postgres" -c "\set ON_ERROR_STOP on" -f "${JOB_DIR}/config/roles.sql"
}

function enable_recovery_conf_slave() {
  <% if p("databases.master") %>
    # make sure recovery.conf is not on master
    if [ -f $DATA_DIR/recovery.conf ]; then
      rm $DATA_DIR/recovery.conf
    fi
  <% else %>
    # initial full copy from master
    # run only on slave for the first time
    if [ ! -f $DATA_DIR/postgresql.conf ]; then
      su - vcap -c "echo <%= p("databases.replication_password") %> | $PACKAGE_DIR/bin/pg_basebackup -h <%= p("databases.replication_node2") %> -D $DATA_DIR -U <%= p("databases.replication_user") %> -v -P -Xs"
      chmod -R 0700 $DATA_DIR
    fi
    
    cp $JOB_DIR/config/recovery.conf $DATA_DIR
    chown vcap:vcap $DATA_DIR/recovery.conf
    
  <% end %>
}

function create_and_stream_data_dir(){
  <% if p("databases.master") %>
    psql -U "vcap" -d "postgres" -c "SELECT pg_start_backup('base backup for streaming rep')" 
    rsync -cva --inplace --exclude=*pg_xlog* ${PGDATA}/ <% p("replication_node2") %>:$PGDATA 
    psql -U "vcap" -d "postgres" -c "SELECT pg_stop_backup(), current_timestamp" 
  }

function create_recovery_slot_master() {
  <% if p("databases.master") %>
    # create replication slot on master
    set +e
    $PACKAGE_DIR/bin/psql -U vcap -p $PORT -d postgres -c "SELECT pg_create_physical_replication_slot('nimbus_replication_slot')"
    set -e
  <% else %>
    # make sure there is no replication slot on slave
    # set +e
    # $PACKAGE_DIR/bin/psql -U vcap -p $PORT -d postgres \
                        #  -c "SELECT pg_drop_replication_slot('nimbus_replication_slot')"
    # set -e
    :
  <% end %>
}

function create_databases() {
  echo "Creating databases..."
  <% p("databases.databases", []).each do |database| %>
    echo "Creating database <%= database["name"] %>..."
    "${PACKAGE_DIR}/bin/psql" \
      -U "vcap" \
      -p "${PORT}" \
      -d "postgres" \
	  -tc "SELECT 1 FROM pg_database WHERE datname = '<%= database["name"] %>'" \
      | grep -q 1 || \
      "${PACKAGE_DIR}/bin/psql" \
      -U "vcap" \
      -p "${PORT}" \
      -d "postgres" \
	  -c "CREATE DATABASE \"<%= database["name"] %>\""
	
    <% if database["citext"] %>
      echo "Trying to install citext..."
      pgexec "<%= database["name"] %>" "CREATE EXTENSION IF NOT EXISTS citext"
    <% end %>

    echo "Enabling pgcrypto extension..."
    pgexec "<%= database["name"] %>" "CREATE EXTENSION IF NOT EXISTS pgcrypto"

    <% if p("databases.collect_statement_statistics") %>
      echo "Enabling pg_stat_statements extension..."
      pgexec "<%= database["name"] %>" "CREATE EXTENSION IF NOT EXISTS pg_stat_statements"
    <% end %>

  <% end %>
}

function is_major() {
  [ "${pgversion_current%.*}" != "${pgversion_upgrade_from%.*}" ]
}

function init_data_dir(){
  if [ ! -f "${DATA_DIR}/postgresql.conf" ]; then
    # initdb creates data directories
    echo "Initializing data directory ${DATA_DIR}"
    su - vcap -c "${PACKAGE_DIR}/bin/initdb -E utf8 --locale en_US.UTF-8 -D ${DATA_DIR}"
  fi
}

function run_major_upgrade(){
  if is_major; then
    rm -rf ${DATA_DIR_PREVIOUS}
    echo "Running a PostgreSQL major upgrade from ${pgversion_upgrade_from} to ${pgversion_current}"
    touch "$POSTGRES_UPGRADE_LOCK"
    chmod 755 "$POSTGRES_UPGRADE_LOCK"
    init_data_dir
    # Move to a directory writeable by vcap user
    su - vcap <<EOF
    set -e
    if [ "$ENABLE_TRACE" != "0" ]; then
      set -x
    fi
    mkdir -p "${PG_STORE_DIR}/pg_upgrade_tmp"
    pushd "${PG_STORE_DIR}/pg_upgrade_tmp"
      ${PACKAGE_DIR}/bin/pg_upgrade \
        --old-datadir ${DATA_DIR_OLD} \
        --new-datadir ${DATA_DIR} \
        --old-bindir ${PACKAGE_DIR_OLD}/bin \
        --new-bindir ${PACKAGE_DIR}/bin \
        --verbose
    popd
    mv "${DATA_DIR_OLD}" "${DATA_DIR_PREVIOUS}"
    echo ${pgversion_current} > ${VERSION_FILE}
EOF
    rm -f "${POSTGRES_UPGRADE_LOCK}"
  fi
}
function run_minor_upgrade(){
  if ! is_major; then
    rm -rf ${DATA_DIR_PREVIOUS}
    echo "Running a PostgreSQL minor upgrade from ${pgversion_upgrade_from} to ${pgversion_current}"
    <% if p("databases.skip_data_copy_in_minor") %>
    mv "${DATA_DIR_OLD}" "${DATA_DIR}"
    <% else %>
    mkdir -p "${DATA_DIR}"
    chown -R vcap:vcap "${DATA_DIR}"
    chmod 700 "${DATA_DIR}"

    su - vcap <<EOF
    set -e
    if [ "$ENABLE_TRACE" != "0" ]; then
      set -x
    fi
    pushd "${DATA_DIR_OLD}" > /dev/null
      cp -r * ${DATA_DIR}
    popd > /dev/null
    mv "${DATA_DIR_OLD}" "${DATA_DIR_PREVIOUS}"
EOF
    <% end %>
  fi
}
